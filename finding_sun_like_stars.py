# -*- coding: utf-8 -*-
"""FINDING SUN-LIKE STARS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hoWfFv23sKAh1UuAlZ8VAt_MOfnAQ5wA
"""

from google.colab import files

file = files.upload()

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("star_with_gravity.csv")

df.head()

mass = df["Mass"].to_list()
radius = df["Radius"].to_list()
dist = df["Distance"].to_list()
gravity = df["Gravity"].to_list()

mass.sort()
radius.sort()
gravity.sort()
plt.plot(radius,mass)

plt.title("Radius & Mass of the Star")
plt.xlabel("Radius")
plt.ylabel("Mass")
plt.show()

plt.plot(mass,gravity)

plt.title("Mass vs Gravity")
plt.xlabel("Mass")
plt.ylabel("Gravity")
plt.show()

plt.scatter(radius,mass)
plt.xlabel("Radius")
plt.ylabel("Mass")
plt.show()

df.head()

import plotly.express as px

mass = df["Mass"].to_list()
radius = df["Radius"].to_list()
dist = df["Distance"].to_list()
gravity = df["Gravity"].to_list()
namee = df["Star_name"].to_list()


colors = ['sun']

for i in range(252):
  colors.append("not sun")
print(len(colors))

size = [2]
for i in range(252):
  size.append(1)


fig = px.scatter(x=mass, y=radius,title="Mass vs Radius",hover_name=namee,size=size,color=colors)
fig.show()

df.head()

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("star_with_gravity.csv")

df.head()

mass = df["Mass"].to_list()
radius = df["Radius"].to_list()
dist = df["Distance"].to_list()
gravity = df["Gravity"].to_list()
name = df["Star_name"].to_list()

df.head()

len(dist)

comp_dist_index = []

for i in range(len(dist)):
  if dist[i]<=100:
    comp_dist_index.append(i)

print(len(comp_dist_index))

second_phase_list= []

for i in comp_dist_index:
  temp_list = []
  temp_list.append(i)
  temp_list.append(name[i])
  temp_list.append(dist[i])
  temp_list.append(mass[i])
  temp_list.append(radius[i])
  temp_list.append(gravity[i])

  second_phase_list.append(temp_list)

second_phase_list[0]

comp_grav_index = []

for i in range(len(second_phase_list)):
  if second_phase_list[i][5]<=350 and second_phase_list[i][5]>=150:
    comp_grav_index.append(i)

print(len(comp_grav_index))

final_list = []

for i in comp_grav_index:
  temp_list = []
  temp_list.append(i)
  temp_list.append(name[i])
  temp_list.append(dist[i])
  temp_list.append(mass[i])
  temp_list.append(radius[i])
  temp_list.append(gravity[i])

  final_list.append(temp_list)

len(final_list)

import csv
fields = ['Star_name','Distance','Mass','Radius','Gravity']
final_list

with open('filtered_stars.csv', 'w') as f:

    # using csv.writer method from CSV package
    write = csv.writer(f)

    write.writerow(fields)
    write.writerows(final_list)

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("filtered_stars.csv")

df.head()

star_name_fil = df["Star_name"].to_list()
distance_fil = df["Distance"].to_list()
mass_fil = df["Mass"].to_list()
radius_fil = df["Radius"].to_list()
gravity_fil = df["Gravity"].to_list()

plt.bar(star_name_fil, mass_fil)
plt.plot()

plt.title("Name & Mass of the Star")
plt.xlabel("Name")
plt.ylabel("Mass")
plt.show()



plt.bar(star_name_fil, radius_fil)
plt.plot()

plt.title("Name & Radius of the Star")
plt.xlabel("Name")
plt.ylabel("Radius")
plt.show()


plt.bar(star_name_fil, distance_fil)
plt.plot()

plt.title("Name & Distance of the Star")
plt.xlabel("Name")
plt.ylabel("Distance")
plt.show()


plt.bar(star_name_fil, gravity_fil)
plt.plot()

plt.title("Name & Gravity of the Star")
plt.xlabel("n=Name")
plt.ylabel("Gravity")
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("star_with_gravity.csv")

df.head()

star_name = df["Star_name"].to_list()
dist = df["Distance"].to_list()
mass = df["Mass"].to_list()
radius = df["Radius"].to_list()
gravity = df["Gravity"].to_list()

df.head()

final_list = []

for i in range(len(star_name)):
  temp_dict = {
      "star_name":star_name[i],
      "dist":dist[i],
      "mass":mass[i],
      "radius":radius[i],
      "gravity":gravity[i],
  }

  final_list.append(temp_dict)

final_list

